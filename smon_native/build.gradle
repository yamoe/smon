
apply plugin: 'java-library'
apply plugin: 'eclipse'

group = 'native.smon'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
    api 'org.apache.commons:commons-math3:3.6.1'

    implementation 'com.google.guava:guava:21.0'

    testImplementation 'junit:junit:4.12'
}

// className is full package name. ex> io.yukul.smon.jni.JNI
def javahClass(String className) {
	final def dir = project.projectDir.toString().replaceAll('\\\\','/')

	def outputDir = dir + '/native/jni_header'
  def classpath = dir + '/build/classes/main'
  
	exec {
		executable 'javah'
		args '-jni', '-v', '-d', outputDir, '-cp', classpath, className
	}
}

task jni {
  doLast {
    println '[yukul-ky] ' + name
    javahClass('io.yukul.smon.jni.JNI')
  }
}

task compileNative {
  doLast {

    println '[yukul-ky] ' + name

    final def dir = "${project.projectDir}"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
      exec {
        executable "${dir}/native/compile_native.bat"
      }
    } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
      exec {
        executable "${dir}/native/compile_native.sh"
      }
    } else {
      // isMacOsX or isSolaris or isFreeBSD or else
      def errmsg = 'failed to compile native(cpp). this is not supported os'
      println errmsg
      throw new GradleException(errmsg)
    }
  }
}

tasks.build.doLast(){
	jni.execute()
  compileNative.execute()
	println '[yukul-ky] complete smon_native !!!'  
}


